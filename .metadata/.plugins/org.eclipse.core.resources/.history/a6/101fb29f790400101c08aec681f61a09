package com.care.boot.game;

import org.springframework.web.socket.*;
import org.springframework.web.socket.handler.TextWebSocketHandler;
import org.springframework.stereotype.Component;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.util.Set;

@Component
public class GameWebSocketHandler extends TextWebSocketHandler {
    private final GameSessionManager sessionManager;
    private final ObjectMapper objectMapper = new ObjectMapper();  // ✅ JSON 변환기 추가

    public GameWebSocketHandler(GameSessionManager sessionManager) {
        this.sessionManager = sessionManager;
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        String playerId = getPlayerIdFromSession(session);
        if (playerId != null) {
            sessionManager.addPlayer(playerId);
            sendOnlinePlayers(session);
        }
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        String playerId = getPlayerIdFromSession(session);
        if (playerId != null) {
            sessionManager.removePlayer(playerId);
        }
    }

    // ✅ 안전한 playerId 가져오기 (세션에서 null 체크 추가)
    private String getPlayerIdFromSession(WebSocketSession session) {
        Object playerIdObj = session.getAttributes().get("playerId");
        return (playerIdObj instanceof String) ? (String) playerIdObj : null;
    }

    // ✅ 현재 온라인 플레이어 목록을 **JSON 형식**으로 전송
    private void sendOnlinePlayers(WebSocketSession session) {
        try {
            Set<String> onlinePlayers = sessionManager.getOnlinePlayers();
            String jsonPlayers = objectMapper.writeValueAsString(onlinePlayers); // ✅ JSON 변환
            session.sendMessage(new TextMessage(jsonPlayers));
        } catch (IOException e) {
            System.err.println("❌ 온라인 플레이어 목록 전송 실패: " + e.getMessage());
        }
    }
}
