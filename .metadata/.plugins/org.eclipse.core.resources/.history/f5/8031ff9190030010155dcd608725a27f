package com.care.boot.controller;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import com.care.boot.dto.GameRequest;
import com.care.boot.dto.GameResult;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

@Controller
public class GameController {

    private final SimpMessagingTemplate messagingTemplate;
    private final ConcurrentLinkedQueue<String> waitingPlayers = new ConcurrentLinkedQueue<>();
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();

    public GameController(SimpMessagingTemplate messagingTemplate) {
        this.messagingTemplate = messagingTemplate;
    }

    @MessageMapping("/play")
    public void play(GameRequest request) throws Exception {
        String playerId = request.getPlayerId();
        String move = request.getMove();

        if ("server".equals(request.getMode())) {
            // 서버 vs 사용자 모드
            String serverMove = getRandomMove();
            String result = determineWinner(move, serverMove);
            messagingTemplate.convertAndSend("/topic/result/" + playerId, new GameResult(move, serverMove, result));
        } else {
            // 사용자 vs 사용자 모드
            if (!opponentMap.containsKey(playerId)) {
                // 새로운 플레이어 대기열 추가
                waitingPlayers.add(playerId);
                messagingTemplate.convertAndSend("/topic/match", "매칭 대기 중...");
            } else {
                // 상대방과의 게임 처리
                String opponentId = opponentMap.get(playerId);
                gameMoves.put(playerId, move);

                if (gameMoves.containsKey(opponentId)) {
                    // 두 명 모두 선택 완료 -> 승패 결정
                    String opponentMove = gameMoves.remove(opponentId);
                    String result = determineWinner(move, opponentMove);
                    String opponentResult = determineWinner(opponentMove, move);

                    messagingTemplate.convertAndSend("/topic/result/" + playerId, new GameResult(move, opponentMove, result));
                    messagingTemplate.convertAndSend("/topic/result/" + opponentId, new GameResult(opponentMove, move, opponentResult));

                    // 매칭 정보 삭제
                    opponentMap.remove(playerId);
                    opponentMap.remove(opponentId);
                }
            }
        }
    }

    @MessageMapping("/match")
    public void match(String playerId) {
        if (!waitingPlayers.isEmpty()) {
            String opponentId = waitingPlayers.poll();

            if (!opponentId.equals(playerId)) {
                // 매칭 성공
                opponentMap.put(playerId, opponentId);
                opponentMap.put(opponentId, playerId);

                messagingTemplate.convertAndSend("/topic/match", "매칭 완료!");
            } else {
                // 같은 사람이 중복 요청 방지
                waitingPlayers.add(playerId);
            }
        } else {
            waitingPlayers.add(playerId);
            messagingTemplate.convertAndSend("/topic/match", "매칭 대기 중...");
        }
    }

    private String getRandomMove() {
        String[] moves = {"가위", "바위", "보"};
        return moves[(int) (Math.random() * 3)];
    }

    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
