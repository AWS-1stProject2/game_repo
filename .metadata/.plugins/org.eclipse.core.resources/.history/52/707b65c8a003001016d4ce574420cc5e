package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import com.care.boot.gamedto.GameRequest;
import com.care.boot.gamedto.GameResult;
import org.springframework.messaging.handler.annotation.Payload;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

@Controller
public class GameController {
    private static final String SERVER_ID = "server"; // 서버 ID 상수 선언

    private final SimpMessagingTemplate messagingTemplate;
    private final ConcurrentLinkedQueue<String> waitingPlayers = new ConcurrentLinkedQueue<>();
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();

    public GameController(SimpMessagingTemplate messagingTemplate) {
        this.messagingTemplate = messagingTemplate;
    }

    @MessageMapping("/play")
    public void play(@Payload GameRequest request) throws Exception {
        String playerId = request.getPlayerId();  // 로그인한 ID 그대로 사용
        String move = request.getMove();
        String mode = request.getMode();

        if ("server".equals(mode)) {
            // 서버 vs 사용자 모드
            processServerMode(playerId, move);
        } else {
            // 사용자 vs 사용자 모드
            processPlayerMode(playerId, move);
        }
    }

    @MessageMapping("/match")
    public void match(@Payload String playerId) {
        if (!waitingPlayers.contains(playerId)) {
            waitingPlayers.add(playerId);
        }

        if (waitingPlayers.size() > 1) {
            String opponentId = waitingPlayers.poll();

            if (!opponentId.equals(playerId)) {
                opponentMap.put(playerId, opponentId);
                opponentMap.put(opponentId, playerId);
                messagingTemplate.convertAndSend("/topic/match", "매칭 완료!");
            } else {
                waitingPlayers.add(playerId);
            }
        } else {
            messagingTemplate.convertAndSend("/topic/match", "매칭 대기 중...");
        }
    }

    private void processServerMode(String playerId, String move) {
        String serverMove = getRandomMove();
        String result = determineWinner(move, serverMove);
        sendGameResult(playerId, move, SERVER_ID, serverMove, result);
    }

    private void processPlayerMode(String playerId, String move) {
        if (!opponentMap.containsKey(playerId)) {
            waitingPlayers.add(playerId);
            messagingTemplate.convertAndSend("/topic/match", "매칭 대기 중...");
        } else {
            String opponentId = opponentMap.get(playerId);
            gameMoves.put(playerId, move);

            if (gameMoves.containsKey(opponentId)) {
                String opponentMove = gameMoves.remove(opponentId);
                String result = determineWinner(move, opponentMove);
                String opponentResult = determineWinner(opponentMove, move);

                sendGameResult(playerId, move, opponentId, opponentMove, result);
                sendGameResult(opponentId, opponentMove, playerId, move, opponentResult);

                opponentMap.remove(playerId);
                opponentMap.remove(opponentId);
            }
        }
    }

    private void sendGameResult(String playerId, String playerMove, String opponentId, String opponentMove, String result) {
        messagingTemplate.convertAndSend("/topic/result/" + playerId, 
            new GameResult(playerId, playerMove, opponentId, opponentMove, result));
    }

    private String getRandomMove() {
        String[] moves = {"가위", "바위", "보"};
        return moves[(int) (Math.random() * 3)];
    }

    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
