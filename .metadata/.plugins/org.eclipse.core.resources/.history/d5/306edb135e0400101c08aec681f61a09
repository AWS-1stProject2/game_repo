package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.PlayerStatsDTO;
import com.care.boot.gamedto.GameRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

@Controller
@RequestMapping("/game")
public class GameController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager; // ✅ 온라인 사용자 관리
    private final ConcurrentLinkedQueue<String> waitingPlayers = new ConcurrentLinkedQueue<>();
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();

    public GameController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    // 🔹 WebSocket을 이용한 게임 플레이 요청 처리
    @MessageMapping("/play")
    public void play(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();
        String mode = (request.getMode() == null || request.getMode().isEmpty()) ? "server" : request.getMode();
        String opponent = request.getOpponent();

        if ("server".equals(mode)) {
            processServerMode(playerId, move);
        } else {
            processPlayerMode(playerId, move, opponent);
        }
    }

    // ✅ 서버와 플레이하는 모드 (컴퓨터와 대결)
    private void processServerMode(String playerId, String move) {
        String serverMove = getRandomMove();
        String result = determineWinner(move, serverMove);

        System.out.println("📢 서버 모드 진행: playerId=" + playerId + ", playerMove=" + move + ", serverMove=" + serverMove + ", result=" + result);

        GameDTO gameDTO = new GameDTO(0, playerId, "server", move, serverMove, result, LocalDateTime.now());
        System.out.println("✅ GameDTO 생성됨: " + gameDTO);

        gameService.saveGameResult(gameDTO);

        // ✅ JSON 변환 확인
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            String json = objectMapper.writeValueAsString(gameDTO);
            System.out.println("📩 클라이언트로 전송할 JSON: " + json);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        messagingTemplate.convertAndSend("/topic/result/" + playerId, gameDTO);
    }

    // ✅ 플레이어 모드 처리 (멀티플레이 매칭)
    private
