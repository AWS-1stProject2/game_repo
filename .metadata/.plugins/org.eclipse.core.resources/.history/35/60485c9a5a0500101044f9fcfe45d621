package com.care.boot.game;

import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.PlayerStatsDTO;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

@Service
public class GameService {

    private final GameMapper gameMapper;

    public GameService(GameMapper gameMapper) {
        this.gameMapper = gameMapper;
    }

    public void saveGameResult(GameDTO gameDTO, boolean isMatchWin) {
        if (Objects.isNull(gameDTO.getPlayDate())) {
            gameDTO.setPlayDate(LocalDateTime.now());
        }

        gameMapper.insertGameResult(gameDTO);

        // ✅ 점수 계산
        int scoreChange1 = calculateScoreChange(gameDTO.getResult(), isMatchWin);
        int scoreChange2 = calculateScoreChange(getOppositeResult(gameDTO.getResult()), isMatchWin);

        // ✅ 패배한 사람이 보너스 점수를 받지 않도록 보정
        if (scoreChange1 < 0) scoreChange1 = -2;
        if (scoreChange2 < 0) scoreChange2 = -2;

        // ✅ 점수 업데이트 적용
        updatePlayerStats(gameDTO.getPlayer1Id(), gameDTO.getResult(), scoreChange1);
        updatePlayerStats(gameDTO.getPlayer2Id(), getOppositeResult(gameDTO.getResult()), scoreChange2);
    }


    private int calculateScoreChange(String result, boolean isMatchWin) {
        int baseScore = switch (result) {
            case "승리" -> 3;  // ✅ 승리 시 +3
            case "패배" -> -2; // ✅ 패배 시 -2
            default -> 0;
        };

        // ✅ 3선승 보너스 적용 (승리한 경우에만 추가)
        if (isMatchWin && result.equals("승리")) {
            baseScore += 5;
        }

        return baseScore;
    }


    private void updatePlayerStats(String playerId, String result, int scoreChange) {
        if (!"server".equals(playerId)) {
            PlayerStatsDTO stats = gameMapper.getPlayerStats(playerId);

            // ✅ 플레이어가 없으면 추가 후 업데이트 진행
            if (stats == null) {
                gameMapper.createPlayerStats(playerId);
            }

            gameMapper.updatePlayerStats(playerId, result, scoreChange);
        }
    }

    public PlayerStatsDTO getPlayerStats(String playerId) {
        return gameMapper.getPlayerStats(playerId);
    }

    public List<PlayerStatsDTO> getRanking() {
        return gameMapper.getRanking();
    }

    public List<GameDTO> getGameHistory(String playerId) {
        return gameMapper.getGameHistory(playerId);
    }

    public boolean deleteGameRecord(int gameId) {
        return gameMapper.deleteGameRecord(gameId) > 0;
    }

    private String getOppositeResult(String result) {
        return switch (result) {
            case "승리" -> "패배";
            case "패배" -> "승리";
            default -> "무승부";
        };
    }
    
    public int getPlayerScore(String playerId) {
        PlayerStatsDTO stats = gameMapper.getPlayerStats(playerId);
        return (stats != null) ? stats.getScore() : 0; // ✅ 점수가 없으면 0 반환
    }
    
    

}
