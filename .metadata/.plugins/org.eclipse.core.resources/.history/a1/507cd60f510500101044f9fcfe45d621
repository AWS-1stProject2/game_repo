package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.GameRequest;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;

@Controller
public class GameMatchController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager;

    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, Integer> playerWins = new ConcurrentHashMap<>();

    public GameMatchController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    @MessageMapping("/play")
    public void playMatch(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();

        if (!opponentMap.containsKey(playerId)) return;

        String opponent = opponentMap.get(playerId);
        gameMoves.put(playerId, move);

        if (!gameMoves.containsKey(opponent)) return;

        String opponentMove = gameMoves.get(opponent);
        gameMoves.remove(opponent);
        gameMoves.remove(playerId);

        String result = determineWinner(move, opponentMove);
        String opponentResult = determineWinner(opponentMove, move);

        playerWins.putIfAbsent(playerId, 0);
        playerWins.putIfAbsent(opponent, 0);

        if (result.equals("승리")) playerWins.put(playerId, playerWins.get(playerId) + 1);
        if (result.equals("패배")) playerWins.put(opponent, playerWins.get(opponent) + 1);

        boolean isMatchWin = (playerWins.get(playerId) == 3 || playerWins.get(opponent) == 3);

        GameDTO playerGame = new GameDTO(0, playerId, opponent, move, opponentMove, result, LocalDateTime.now());
        GameDTO opponentGame = new GameDTO(0, opponent, playerId, opponentMove, move, opponentResult, LocalDateTime.now());

        gameService.saveGameResult(playerGame, isMatchWin);
        gameService.saveGameResult(opponentGame, isMatchWin);

        messagingTemplate.convertAndSend("/topic/result/" + playerId, playerGame);
        messagingTemplate.convertAndSend("/topic/result/" + opponent, opponentGame);

        if (isMatchWin) {
            endGame(playerId, opponent);
        }
    }

    /**
     * ✅ 승자 판별 로직 추가 (누락된 메서드)
     */
    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
