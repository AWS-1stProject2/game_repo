package com.care.boot.member;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.care.boot.PageService;

import jakarta.servlet.http.HttpSession;

@Service
public class MemberService {
    @Autowired private IMemberMapper mapper;
    @Autowired private HttpSession session;
    
    public String registProc(MemberDTO member) {
        if (member.getId() == null || member.getId().trim().isEmpty()) {
            return "아이디를 입력하세요.";
        }
        if (member.getPw() == null || member.getPw().trim().isEmpty()) {
            return "비밀번호를 입력하세요.";
        }
        if (!member.getPw().equals(member.getConfirm())) {
            return "두 비밀번호를 일치하여 입력하세요.";
        }
        if (member.getUserName() == null || member.getUserName().trim().isEmpty()) {
            return "이름을 입력하세요.";
        }

        MemberDTO check = mapper.login(member.getId());
        if (check != null) {
            return "이미 사용중인 아이디 입니다.";
        }

        /* 비밀번호 암호화 */
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        String secretPass = encoder.encode(member.getPw());
        member.setPw(secretPass);

        int result = mapper.registProc(member);
        return (result == 1) ? "회원 등록 완료" : "회원 등록을 다시 시도하세요.";
    }

    public MemberDTO login(String id, String pw) { // ✅ 반환 타입을 MemberDTO로 변경
        if (id == null || id.trim().isEmpty()) {
            return null; // 아이디 미입력
        }
        if (pw == null || pw.trim().isEmpty()) {
            return null; // 비밀번호 미입력
        }

        MemberDTO check = mapper.login(id);
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

        if (check != null && encoder.matches(pw, check.getPw())) {
            return check; // ✅ 로그인 성공 시 MemberDTO 반환
        }
        return null; // 로그인 실패
    }
}


















