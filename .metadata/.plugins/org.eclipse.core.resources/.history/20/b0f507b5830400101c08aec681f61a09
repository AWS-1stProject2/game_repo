package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.GameRequest;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;

@Controller
public class GameController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager;
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();

    public GameController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    // ✅ 플레이 요청 (서버 또는 플레이어와 대결)
    @MessageMapping("/play")
    public void play(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();
        String mode = request.getMode();
        System.out.println("🎮 플레이 요청: " + playerId + " | 선택: " + move + " | 모드: " + mode);

        if ("server".equals(mode)) {
            processServerMode(playerId, move);
        } else {
            processPlayerMode(playerId, move);
        }
    }

    // ✅ 서버 모드 처리 (컴퓨터와 대결)
    private void processServerMode(String playerId, String move) {
        String serverMove = getRandomMove();
        String result = determineWinner(move, serverMove);
        GameDTO gameDTO = new GameDTO(0, playerId, "server", move, serverMove, result, LocalDateTime.now());
        gameService.saveGameResult(gameDTO);
        messagingTemplate.convertAndSend("/topic/result/" + playerId, gameDTO);
    }

    // ✅ 랜덤 매칭 포함 플레이어 모드 처리
    private void processPlayerMode(String playerId, String move) {
        synchronized (this) {
            if (!opponentMap.containsKey(playerId)) {
                String opponent = sessionManager.findMatch(playerId);

                if (opponent == null) {
                    sessionManager.addToMatchQueue(playerId);
                    messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 상대 없음. 대기 중...");
                    return;
                }

                opponentMap.put(playerId, opponent);
                opponentMap.put(opponent, playerId);
                messagingTemplate.convertAndSend("/topic/match/" + playerId, opponent);
                messagingTemplate.convertAndSend("/topic/match/" + opponent, playerId);
            }

            String opponentId = opponentMap.get(playerId);
            gameMoves.put(playerId, move);

            if (gameMoves.containsKey(opponentId)) {
                String opponentMove = gameMoves.remove(opponentId);
                String result = determineWinner(move, opponentMove);
                String opponentResult = determineWinner(opponentMove, move);

                GameDTO playerGame = new GameDTO(0, playerId, opponentId, move, opponentMove, result, LocalDateTime.now());
                GameDTO opponentGame = new GameDTO(0, opponentId, playerId, opponentMove, move, opponentResult, LocalDateTime.now());

                gameService.saveGameResult(playerGame);
                gameService.saveGameResult(opponentGame);

                messagingTemplate.convertAndSend("/topic/result/" + playerId, playerGame);
                messagingTemplate.convertAndSend("/topic/result/" + opponentId, opponentGame);

                opponentMap.remove(playerId);
                opponentMap.remove(opponentId);
            }
        }
    }

    // ✅ 랜덤 가위바위보 선택
    private String getRandomMove() {
        String[] moves = {"가위", "바위", "보"};
        return moves[(int) (Math.random() * 3)];
    }

    // ✅ 승패 결정 로직
    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
