package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.GameRequest;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;

@Controller
public class GameMatchController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager;

    // ✅ 플레이어 대결 관련 정보 저장
    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, Integer> playerWins = new ConcurrentHashMap<>();

    public GameMatchController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    /**
     * ✅ 랜덤 매칭 요청 처리 (플레이어 vs 플레이어)
     */
    @MessageMapping("/match")
    public void handleMatchRequest(GameRequest request) {
        String playerId = request.getPlayerId();

        // 이미 대기열에 있는 경우 중복 방지
        if (sessionManager.isInQueue(playerId)) {
            messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 이미 대기 중입니다.");
            return;
        }

        // 대기열에서 상대 찾기
        String opponent = sessionManager.findMatch(playerId);
        if (opponent == null) {
            sessionManager.addToMatchQueue(playerId);
            messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 상대 없음. 대기 중...");
        } else {
            // ✅ 매칭 성공 -> 플레이어 저장
            opponentMap.put(playerId, opponent);
            opponentMap.put(opponent, playerId);
            playerWins.put(playerId, 0);
            playerWins.put(opponent, 0);
            messagingTemplate.convertAndSend("/topic/match/" + playerId, opponent);
            messagingTemplate.convertAndSend("/topic/match/" + opponent, playerId);
        }
    }

    /**
     * ✅ 플레이어 vs 플레이어 가위바위보 진행
     */
    @MessageMapping("/play")
    public void playMatch(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();

        // 상대 정보 확인
        if (!opponentMap.containsKey(playerId)) return;

        String opponent = opponentMap.get(playerId);
        String opponentMove = getRandomMove();
        String result = determineWinner(move, opponentMove);

        // 승리 횟수 증가
        if (result.equals("승리")) playerWins.put(playerId, playerWins.getOrDefault(playerId, 0) + 1);
        if (result.equals("패배")) playerWins.put(opponent, playerWins.getOrDefault(opponent, 0) + 1);

        // 4선승제 종료 처리
        if (playerWins.get(playerId) == 4 || playerWins.get(opponent) == 4) {
            endGame(playerId, opponent);
        }
    }

    /**
     * ✅ 4선승 시 게임 종료 및 재매칭
     */
    private void endGame(String winner, String loser) {
        opponentMap.remove(winner);
        opponentMap.remove(loser);
        messagingTemplate.convertAndSend("/topic/match/" + winner, "🎉 4선승 완료! 다시 매칭됩니다...");
        messagingTemplate.convertAndSend("/topic/match/" + loser, "❌ 상대가 4승 달성! 다시 매칭됩니다...");
        sessionManager.addToMatchQueue(winner);
        sessionManager.addToMatchQueue(loser);
        handleMatchRequest(new GameRequest(winner));
        handleMatchRequest(new GameRequest(loser));
    }

    /**
     * ✅ 랜덤 가위바위보 선택
     */
    private String getRandomMove() {
        String[] moves = {"가위", "바위", "보"};
        return moves[(int) (Math.random() * 3)];
    }

    /**
     * ✅ 승자 판별 로직
     */
    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
