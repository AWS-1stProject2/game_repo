package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.GameRequest;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;

@Controller
public class GameMatchController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager;

    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, Integer> playerWins = new ConcurrentHashMap<>();

    public GameMatchController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    /**
     * ✅ 랜덤 매칭 요청 처리 (플레이어 vs 플레이어)
     */
    @MessageMapping("/match")
    public void handleMatchRequest(GameRequest request) {
        String playerId = request.getPlayerId();

        if (sessionManager.isInQueue(playerId)) {
            messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 이미 대기 중입니다.");
            return;
        }

        // 대기열에서 상대 찾기
        String opponent = sessionManager.findMatch(playerId);
        if (opponent == null) {
            sessionManager.addToMatchQueue(playerId);
            messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 상대 없음. 대기 중...");
        } else {
            // ✅ 매칭 성공 -> 플레이어 정보 저장
            opponentMap.put(playerId, opponent);
            opponentMap.put(opponent, playerId);
            playerWins.putIfAbsent(playerId, 0);
            playerWins.putIfAbsent(opponent, 0);
            messagingTemplate.convertAndSend("/topic/match/" + playerId, opponent);
            messagingTemplate.convertAndSend("/topic/match/" + opponent, playerId);
        }
    }

    /**
     * ✅ 플레이어가 연결을 끊거나 나갔을 경우 상대방에게 알림
     */
    @MessageMapping("/disconnect")
    public void handleDisconnect(GameRequest request) {
        String playerId = request.getPlayerId();
        if (opponentMap.containsKey(playerId)) {
            String opponent = opponentMap.get(playerId);

            // 상대방에게 알림
            messagingTemplate.convertAndSend("/topic/match/end/" + opponent, "❌ 상대방이 나갔습니다. 다시 매칭하세요.");
            messagingTemplate.convertAndSend("/topic/match/end/" + playerId, "❌ 연결이 종료되었습니다.");

            // 매칭 해제 및 대기열에서 삭제
            resetGameState(playerId, opponent);
        }
        sessionManager.removeFromQueue(playerId);
        sessionManager.clearMatchedPlayer(playerId);
    }

    /**
     * ✅ 플레이어 vs 플레이어 가위바위보 진행
     */
    @MessageMapping("/play")
    public void playMatch(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();

        if (!opponentMap.containsKey(playerId)) return;

        String opponent = opponentMap.get(playerId);
        gameMoves.put(playerId, move);

        if (!gameMoves.containsKey(opponent)) return;

        String opponentMove = gameMoves.get(opponent);
        gameMoves.remove(opponent);
        gameMoves.remove(playerId);

        String result = determineWinner(move, opponentMove);
        String opponentResult = determineWinner(opponentMove, move);

        playerWins.putIfAbsent(playerId, 0);
        playerWins.putIfAbsent(opponent, 0);

        if (result.equals("승리")) playerWins.put(playerId, playerWins.get(playerId) + 1);
        if (result.equals("패배")) playerWins.put(opponent, playerWins.get(opponent) + 1);

        boolean isMatchWin = (playerWins.get(playerId) == 3 || playerWins.get(opponent) == 3);

        GameDTO playerGame = new GameDTO(0, playerId, opponent, move, opponentMove, result, LocalDateTime.now());
        GameDTO opponentGame = new GameDTO(0, opponent, playerId, opponentMove, move, opponentResult, LocalDateTime.now());

        gameService.saveGameResult(playerGame, isMatchWin);
        gameService.saveGameResult(opponentGame, isMatchWin);

        messagingTemplate.convertAndSend("/topic/result/" + playerId, playerGame);
        messagingTemplate.convertAndSend("/topic/result/" + opponent, opponentGame);

        if (isMatchWin) {
            endGame(playerId, opponent);
        }
    }


    /**
     * ✅ 3선승 시 게임 종료 및 데이터 초기화
     */
    private void endGame(String winner, String loser) {
        resetGameState(winner, loser);

        messagingTemplate.convertAndSend("/topic/match/end/" + winner, "🎉 3선승 완료! 다시 매칭을 선택하세요.");
        messagingTemplate.convertAndSend("/topic/match/end/" + loser, "❌ 상대가 3승 달성! 다시 매칭을 선택하세요.");

        sessionManager.clearMatchedPlayer(winner);
        sessionManager.clearMatchedPlayer(loser);
    }

    /**
     * ✅ 3선승 이후 게임 데이터 초기화
     */
    private void resetGameState(String player1, String player2) {
        opponentMap.remove(player1);
        opponentMap.remove(player2);
        playerWins.remove(player1);
        playerWins.remove(player2);
        gameMoves.remove(player1);
        gameMoves.remove(player2);
        
        // ✅ 강제 종료된 플레이어가 다시 매칭될 수 있도록 수정
        sessionManager.resetPlayerState(player1);
        sessionManager.resetPlayerState(player2);
    }

    /**
     * ✅ 승자 판별 로직
     */
    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
