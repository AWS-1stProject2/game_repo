//package com.care.boot.game;
//
//import org.springframework.messaging.handler.annotation.MessageMapping;
//import org.springframework.messaging.simp.SimpMessagingTemplate;
//import org.springframework.stereotype.Controller;
//import com.care.boot.gamedto.GameDTO;
//import com.care.boot.gamedto.GameRequest;
//import java.time.LocalDateTime;
//import java.util.concurrent.ConcurrentHashMap;
//
//@Controller
//public class GameController {
//    private final SimpMessagingTemplate messagingTemplate;
//    private final GameService gameService;
//    private final GameSessionManager sessionManager;
//    
//    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
//    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();
//    private final ConcurrentHashMap<String, Integer> playerWins = new ConcurrentHashMap<>();
//    private final ConcurrentHashMap<String, Boolean> isServerMode = new ConcurrentHashMap<>(); // ✅ 서버 모드 여부 저장
//
//    public GameController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
//        this.messagingTemplate = messagingTemplate;
//        this.gameService = gameService;
//        this.sessionManager = sessionManager;
//    }
//
//    @MessageMapping("/play")
//    public void play(GameRequest request) {
//        String playerId = request.getPlayerId();
//        String move = request.getMove();
//        String mode = request.getMode();
//
//        System.out.println("🎮 플레이 요청: " + playerId + " | 선택: " + move + " | 모드: " + mode);
//
//        if ("server".equals(mode)) {
//            processServerMode(playerId, move);
//        } else {
//            processPlayerMode(playerId, move);
//        }
//    }
//
//    private void processServerMode(String playerId, String move) {
//        if (!opponentMap.containsKey(playerId) || !isServerMode.getOrDefault(playerId, false)) {
//            System.out.println("⚠ " + playerId + "는 현재 서버와 대결 중이 아닙니다.");
//            return;
//        }
//
//        String serverMove = getRandomMove();
//        String result = determineWinner(move, serverMove);
//
//        GameDTO gameDTO = new GameDTO(0, playerId, "server", move, serverMove, result, LocalDateTime.now());
//        gameService.saveGameResult(gameDTO);
//        messagingTemplate.convertAndSend("/topic/result/" + playerId, gameDTO);
//
//        // ✅ 서버 대결에서는 계속 버튼 활성화
//        messagingTemplate.convertAndSend("/topic/continue/" + playerId, "계속 진행");
//    }
//
//    @MessageMapping("/startServerMatch")
//    public void startServerMatch(GameRequest request) {
//        String playerId = request.getPlayerId();
//        opponentMap.put(playerId, "server");
//        isServerMode.put(playerId, true); // ✅ 서버 모드 활성화
//        messagingTemplate.convertAndSend("/topic/match/" + playerId, "server");
//        System.out.println("🚀 서버와의 대결 시작: " + playerId);
//    }
//
//    @MessageMapping("/quitServerMatch")
//    public void quitServerMatch(GameRequest request) {
//        String playerId = request.getPlayerId();
//        opponentMap.remove(playerId);
//        isServerMode.remove(playerId); // ✅ 서버 모드 해제
//        messagingTemplate.convertAndSend("/topic/match/end/" + playerId, "❌ 서버 대결 종료됨");
//        System.out.println("🚪 서버와의 대결 종료: " + playerId);
//    }
//
//    @MessageMapping("/match")
//    public void handleMatchRequest(GameRequest request) {
//        String playerId = request.getPlayerId();
//
//        if (sessionManager.isInQueue(playerId)) {
//            messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 이미 대기 중입니다.");
//            return;
//        }
//
//        String opponent = sessionManager.findMatch(playerId);
//        if (opponent == null) {
//            sessionManager.addToMatchQueue(playerId);
//            messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 상대 없음. 대기 중...");
//            System.out.println("🕐 대기열 추가됨: " + playerId);
//        } else {
//            opponentMap.put(playerId, opponent);
//            opponentMap.put(opponent, playerId);
//            playerWins.put(playerId, 0);
//            playerWins.put(opponent, 0);
//            messagingTemplate.convertAndSend("/topic/match/" + playerId, opponent);
//            messagingTemplate.convertAndSend("/topic/match/" + opponent, playerId);
//            System.out.println("✅ 매칭 성공: " + playerId + " vs " + opponent);
//        }
//    }
//
//    private void processPlayerMode(String playerId, String move) {
//        if (!opponentMap.containsKey(playerId)) return;
//
//        String opponent = opponentMap.get(playerId);
//        gameMoves.put(playerId, move);
//
//        if (!gameMoves.containsKey(opponent)) return;
//
//        String opponentMove = gameMoves.remove(opponent);
//        String result = determineWinner(move, opponentMove);
//        String opponentResult = determineWinner(opponentMove, move);
//
//        if (result.equals("승리")) playerWins.put(playerId, playerWins.get(playerId) + 1);
//        if (result.equals("패배")) playerWins.put(opponent, playerWins.get(opponent) + 1);
//
//        GameDTO playerGame = new GameDTO(0, playerId, opponent, move, opponentMove, result, LocalDateTime.now());
//        GameDTO opponentGame = new GameDTO(0, opponent, playerId, opponentMove, move, opponentResult, LocalDateTime.now());
//
//        gameService.saveGameResult(playerGame);
//        gameService.saveGameResult(opponentGame);
//
//        messagingTemplate.convertAndSend("/topic/result/" + playerId, playerGame);
//        messagingTemplate.convertAndSend("/topic/result/" + opponent, opponentGame);
//
//        if (playerWins.get(playerId) == 4) {
//            endGame(playerId, opponent);
//        } else if (playerWins.get(opponent) == 4) {
//            endGame(opponent, playerId);
//        }
//    }
//
//    private void endGame(String winner, String loser) {
//        playerWins.remove(winner);
//        playerWins.remove(loser);
//        opponentMap.remove(winner);
//        opponentMap.remove(loser);
//        messagingTemplate.convertAndSend("/topic/match/" + winner, "🎉 4선승 완료! 게임 종료!");
//        messagingTemplate.convertAndSend("/topic/match/" + loser, "❌ 상대가 4승 달성! 게임 종료!");
//        System.out.println("✅ 4선승 완료 후 데이터 삭제: " + winner + " vs " + loser);
//    }
//
//    private String getRandomMove() {
//        String[] moves = {"가위", "바위", "보"};
//        return moves[(int) (Math.random() * 3)];
//    }
//
//    private String determineWinner(String move1, String move2) {
//        if (move1.equals(move2)) return "무승부";
//        if ((move1.equals("가위") && move2.equals("보")) ||
//            (move1.equals("바위") && move2.equals("가위")) ||
//            (move1.equals("보") && move2.equals("바위"))) {
//            return "승리";
//        }
//        return "패배";
//    }
//}

package com.care.boot.game;

import com.care.boot.gamedto.PlayerStatsDTO;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class GameController {
    private final GameService gameService;

    public GameController(GameService gameService) {
        this.gameService = gameService;
    }

    // ✅ 플레이어의 현재 점수 조회 API
    @GetMapping("/player-score")
    public PlayerStatsDTO getPlayerScore(@RequestParam String playerId) {
        return gameService.getPlayerStats(playerId);
    }
}

