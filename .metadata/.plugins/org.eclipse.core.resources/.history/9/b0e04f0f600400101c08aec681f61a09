package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.GameRequest;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;

@Controller
@RequestMapping("/game")
public class GameController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager;
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();  // ✅ 플레이어가 선택한 값을 저장

    public GameController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    // ✅ 게임 요청 처리 (서버 or 멀티플레이)
    @MessageMapping("/play")
    public void play(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();
        String mode = (request.getMode() == null || request.getMode().isEmpty()) ? "server" : request.getMode();
        String opponent = request.getOpponent();

        if ("server".equals(mode)) {
            processServerMode(playerId, move);
        } else {
            processPlayerMode(playerId, move, opponent);
        }
    }

    // ✅ 서버와 대결 (AI)
    private void processServerMode(String playerId, String move) {
        String serverMove = getRandomMove();
        String result = determineWinner(move, serverMove);

        GameDTO gameDTO = new GameDTO(0, playerId, "server", move, serverMove, result, LocalDateTime.now());
        gameService.saveGameResult(gameDTO);
        messagingTemplate.convertAndSend("/topic/result/" + playerId, gameDTO);
    }

    // ✅ 멀티플레이 (랜덤 or 특정 상대)
    private void processPlayerMode(String playerId, String move, String opponent) {
        if ("random".equals(opponent)) {
            opponent = sessionManager.findMatch(playerId);
        }

        // 🔴 상대방이 없으면 대기열에 추가 후 종료
        if (opponent == null) {
            messagingTemplate.convertAndSend("/topic/match", "❌ 상대방 없음. 대기 중...");
            sessionManager.addToMatchQueue(playerId);
            return;
        }

        gameMoves.put(playerId, move);  // 🔹 플레이어의 선택 저장

        // 🔹 상대방이 선택했는지 확인
        if (gameMoves.containsKey(opponent)) {
            String opponentMove = gameMoves.remove(opponent);
            if (opponentMove == null) {
                messagingTemplate.convertAndSend("/topic/match", "❌ 상대방이 아직 선택하지 않았습니다.");
                return;
            }

            // ✅ 승패 계산
            String result = determineWinner(move, opponentMove);
            String opponentResult = determineWinner(opponentMove, move);

            // ✅ 게임 결과 저장
            GameDTO playerGame = new GameDTO(0, playerId, opponent, move, opponentMove, result, LocalDateTime.now());
            GameDTO opponentGame = new GameDTO(0, opponent, playerId, opponentMove, move, opponentResult, LocalDateTime.now());

            gameService.saveGameResult(playerGame);
            gameService.saveGameResult(opponentGame);

            // ✅ 결과 전송
            messagingTemplate.convertAndSend("/topic/result/" + playerId, playerGame);
            messagingTemplate.convertAndSend("/topic/result/" + opponent, opponentGame);

        } else {
            messagingTemplate.convertAndSend("/topic/match", "🔵 상대방을 기다리는 중...");
        }
    }

    // ✅ 랜덤 가위바위보 선택
    private String getRandomMove() {
        String[] moves = {"가위", "바위", "보"};
        return moves[(int) (Math.random() * 3)];
    }

    // ✅ 승패 결정 로직
    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
