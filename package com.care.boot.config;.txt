package com.care.boot.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic");  // ✅ 클라이언트가 메시지를 받을 때 사용하는 prefix
        config.setApplicationDestinationPrefixes("/app"); // ✅ 클라이언트가 메시지를 보낼 때 사용하는 prefix
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/game")
                .setAllowedOriginPatterns("*")  // ✅ 와일드카드 사용 가능
                .withSockJS();
    }

}

package com.care.boot.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class JacksonConfig {
    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());  // ✅ Java 8 날짜 직렬화 모듈 추가
        return objectMapper;
    }
}




package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.GameRequest;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;

@Controller
public class GameController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager;
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();

    public GameController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    @MessageMapping("/play")
    public void play(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();
        String mode = request.getMode();

        System.out.println("🎮 플레이 요청: " + playerId + " | 선택: " + move + " | 모드: " + mode);

        // ✅ 이전 게임 데이터 정리
        gameMoves.remove(playerId);

        if ("server".equals(mode)) {
            processServerMode(playerId, move);
        } else {
            processPlayerMode(playerId, move);
        }
    }

    private void processServerMode(String playerId, String move) {
        String serverMove = getRandomMove();
        String result = determineWinner(move, serverMove);

        GameDTO gameDTO = new GameDTO(0, playerId, "server", move, serverMove, result, LocalDateTime.now());
        gameService.saveGameResult(gameDTO);
        messagingTemplate.convertAndSend("/topic/result/" + playerId, gameDTO);
    }

    private void processPlayerMode(String playerId, String move) {
        if (opponentMap.containsKey(playerId)) {
            String opponent = opponentMap.get(playerId);
            gameMoves.put(playerId, move);

            if (gameMoves.containsKey(opponent)) {
                String opponentMove = gameMoves.remove(opponent);
                String result = determineWinner(move, opponentMove);
                String opponentResult = determineWinner(opponentMove, move);

                GameDTO playerGame = new GameDTO(0, playerId, opponent, move, opponentMove, result, LocalDateTime.now());
                GameDTO opponentGame = new GameDTO(0, opponent, playerId, opponentMove, move, opponentResult, LocalDateTime.now());

                gameService.saveGameResult(playerGame);
                gameService.saveGameResult(opponentGame);

                messagingTemplate.convertAndSend("/topic/result/" + playerId, playerGame);
                messagingTemplate.convertAndSend("/topic/result/" + opponent, opponentGame);

                // ✅ 게임이 끝난 후 데이터 삭제 + 대기열로 자동 복귀 안 함
                gameMoves.remove(playerId);
                gameMoves.remove(opponent);
                opponentMap.remove(playerId);
                opponentMap.remove(opponent);

                System.out.println("✅ 게임 완료 후 데이터 삭제: " + playerId + " vs " + opponent);
            }
        } else {
            // ✅ 플레이어가 이미 대기 중인지 확인 후, 중복 추가 방지
            if (sessionManager.isInQueue(playerId)) {
                System.out.println("⚠ " + playerId + "는 이미 대기 중...");
                return;
            }

            // ✅ 새로운 매칭 요청 (플레이어가 직접 버튼을 눌렀을 때만 실행)
            String opponent = sessionManager.findMatch(playerId);

            if (opponent == null) {
                sessionManager.addToMatchQueue(playerId);
                messagingTemplate.convertAndSend("/topic/match/" + playerId, "❌ 상대방 없음. 대기 중...");
                System.out.println("🕐 대기열 추가됨: " + playerId);
            } else {
                opponentMap.put(playerId, opponent);
                opponentMap.put(opponent, playerId);
                messagingTemplate.convertAndSend("/topic/match/" + playerId, opponent);
                messagingTemplate.convertAndSend("/topic/match/" + opponent, playerId);
                System.out.println("✅ 매칭 성공: " + playerId + " vs " + opponent);
            }
        }
    }

    private String getRandomMove() {
        String[] moves = {"가위", "바위", "보"};
        return moves[(int) (Math.random() * 3)];
    }

    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}


package com.care.boot.game;

import java.util.List;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.PlayerStatsDTO;

@Mapper
public interface GameMapper {

    // 🔹 게임 결과 저장 (game_history 테이블)
    void insertGameResult(GameDTO gameDTO);

    // 🔹 특정 플레이어의 전적 조회 (player_stats 테이블)
    PlayerStatsDTO getPlayerStats(@Param("playerId") String playerId);

    // 🔹 새로운 플레이어 전적 추가 (초기화) → 반환값 추가 (영향 받은 행 수)
    int createPlayerStats(@Param("playerId") String playerId);

    // 🔹 게임 결과에 따라 전적 업데이트 → 반환값 추가 (영향 받은 행 수)
    int updatePlayerStats(@Param("playerId") String playerId, @Param("result") String result);

    // 🔹 전체 랭킹 조회 (승리 순 정렬)
    List<PlayerStatsDTO> getRanking();

    // 🔹 특정 플레이어의 게임 기록 조회 (game_history 테이블)
    List<GameDTO> getGameHistory(@Param("playerId") String playerId);

    // 🔹 특정 게임 ID의 기록 삭제
    int deleteGameRecord(@Param("gameId") int gameId);
}



package com.care.boot.game;

import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.PlayerStatsDTO;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
public class GameService {

    private final GameMapper gameMapper;

    public GameService(GameMapper gameMapper) {
        this.gameMapper = gameMapper;
    }

    // 🔹 게임 결과 저장 (DB에 기록)
    public void saveGameResult(GameDTO gameDTO) {
        if (Objects.isNull(gameDTO.getPlayDate())) { // ✅ 더 직관적인 null 체크
            gameDTO.setPlayDate(LocalDateTime.now());
        }

        gameMapper.insertGameResult(gameDTO);
        updatePlayerStats(gameDTO.getPlayer1Id(), gameDTO.getResult());
        updatePlayerStats(gameDTO.getPlayer2Id(), getOppositeResult(gameDTO.getResult()));
    }

    // 🔹 특정 플레이어 전적 조회
    public PlayerStatsDTO getPlayerStats(String playerId) {
        return gameMapper.getPlayerStats(playerId);
    }

    // 🔹 전체 랭킹 조회
    public List<PlayerStatsDTO> getRanking() {
        return gameMapper.getRanking();
    }

    // 🔹 특정 플레이어의 게임 기록 조회
    public List<GameDTO> getGameHistory(String playerId) {
        return gameMapper.getGameHistory(playerId);
    }

    // 🔹 특정 게임 기록 삭제
    public boolean deleteGameRecord(int gameId) {
        return gameMapper.deleteGameRecord(gameId) > 0;
    }

    // 🔹 플레이어 전적 업데이트 (승/패/무승부 반영)
    private void updatePlayerStats(String playerId, String result) {
        if (!"server".equals(playerId)) { // ✅ 서버 기록 제외
            Optional.ofNullable(gameMapper.getPlayerStats(playerId)) 
                    .orElseGet(() -> {
                        gameMapper.createPlayerStats(playerId);
                        return gameMapper.getPlayerStats(playerId); // ✅ 생성 후 다시 조회
                    });

            gameMapper.updatePlayerStats(playerId, result);
        }
    }

    // 🔹 상대방의 반대 결과 반환
    private String getOppositeResult(String result) {
        return switch (result) {
            case "승리" -> "패배";
            case "패배" -> "승리";
            default -> "무승부";
        };
    }
}


package com.care.boot.game;

import org.springframework.stereotype.Component;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

@Component
public class GameSessionManager {
    private final Set<String> onlinePlayers = ConcurrentHashMap.newKeySet();
    private final ConcurrentLinkedQueue<String> matchQueue = new ConcurrentLinkedQueue<>();

    public void addPlayer(String playerId) {
        onlinePlayers.add(playerId);
    }

    public void removePlayer(String playerId) {
        onlinePlayers.remove(playerId);
        matchQueue.remove(playerId);
    }

    public Set<String> getOnlinePlayers() {
        return Set.copyOf(onlinePlayers);
    }

    public void addToMatchQueue(String playerId) {
        if (!matchQueue.contains(playerId)) {
            matchQueue.add(playerId);
        }
    }

    public synchronized String findMatch(String playerId) {
        Iterator<String> iterator = matchQueue.iterator();
        while (iterator.hasNext()) {
            String opponent = iterator.next();
            if (!opponent.equals(playerId)) {
                iterator.remove();
                return opponent;
            }
        }
        return null;
    }

    // ✅ 플레이어가 이미 대기 중인지 확인
    public boolean isInQueue(String playerId) {
        return matchQueue.contains(playerId);
    }
}



package com.care.boot.game;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/game")  // 컨트롤러 기본 경로 설정
public class ViewController {

    @GetMapping("")
    public String showGamePage() {
        return "game";  // 뷰 파일을 "WEB-INF/views/game/game.jsp"로 통일 가능
    }
}



package com.care.boot.gamedto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import java.time.LocalDateTime;

public class GameDTO {
    @JsonProperty("gameId")
    private int gameId;

    @JsonProperty("player1Id")
    private String player1Id;

    @JsonProperty("player2Id")
    private String player2Id;

    @JsonProperty("player1Move")
    private String player1Move;

    @JsonProperty("player2Move")
    private String player2Move;

    @JsonProperty("result")
    private String result;

    @JsonProperty("playDate")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")  // ✅ JSON 변환 시 포맷 적용
    @JsonSerialize(using = LocalDateTimeSerializer.class)  // ✅ Jackson이 LocalDateTime 변환하도록 설정
    private LocalDateTime playDate;

    // ✅ 기본 생성자 (JSON 변환 시 필요)
    public GameDTO() {}

    // ✅ 전체 필드를 포함하는 생성자
    public GameDTO(int gameId, String player1Id, String player2Id, String player1Move, String player2Move, String result, LocalDateTime playDate) {
        this.gameId = gameId;
        this.player1Id = player1Id;
        this.player2Id = player2Id;
        this.player1Move = player1Move;
        this.player2Move = player2Move;
        this.result = result;
        this.playDate = playDate;
    }

    // ✅ JSON 직렬화를 위한 Getter 추가
    public int getGameId() { return gameId; }
    public String getPlayer1Id() { return player1Id; }
    public String getPlayer2Id() { return player2Id; }
    public String getPlayer1Move() { return player1Move; }
    public String getPlayer2Move() { return player2Move; }
    public String getResult() { return result; }
    public LocalDateTime getPlayDate() { return playDate; }

    // ✅ JSON 직렬화를 위한 Setter 추가
    public void setGameId(int gameId) { this.gameId = gameId; }
    public void setPlayer1Id(String player1Id) { this.player1Id = player1Id; }
    public void setPlayer2Id(String player2Id) { this.player2Id = player2Id; }
    public void setPlayer1Move(String player1Move) { this.player1Move = player1Move; }
    public void setPlayer2Move(String player2Move) { this.player2Move = player2Move; }
    public void setResult(String result) { this.result = result; }
    public void setPlayDate(LocalDateTime playDate) { this.playDate = playDate; }

    @Override
    public String toString() {
        return "GameDTO{" +
                "gameId=" + gameId +
                ", player1Id='" + player1Id + '\'' +
                ", player2Id='" + player2Id + '\'' +
                ", player1Move='" + player1Move + '\'' +
                ", player2Move='" + player2Move + '\'' +
                ", result='" + result + '\'' +
                ", playDate=" + playDate +
                '}';
    }
}



package com.care.boot.gamedto;

import com.fasterxml.jackson.annotation.JsonProperty;

public class GameRequest {
    @JsonProperty("playerId")
    private String playerId;

    @JsonProperty("move")
    private String move;

    @JsonProperty("mode")
    private String mode = "server";  // ✅ 기본값 설정

    @JsonProperty("opponent")  // ✅ 추가: 상대 플레이어 ID (랜덤 매칭 or 직접 선택)
    private String opponent;

    public GameRequest() {}

    public GameRequest(String playerId, String move, String mode, String opponent) {
        this.playerId = playerId;
        this.move = move;
        this.mode = (mode == null || mode.isEmpty()) ? "server" : mode;
        this.opponent = opponent;
    }

    public String getPlayerId() { return playerId; }
    public void setPlayerId(String playerId) { this.playerId = playerId; }

    public String getMove() { return move; }
    public void setMove(String move) { this.move = move; }

    public String getMode() { return mode; }
    public void setMode(String mode) { this.mode = (mode == null || mode.isEmpty()) ? "server" : mode; }

    public String getOpponent() { return opponent; }
    public void setOpponent(String opponent) { this.opponent = opponent; }

    @Override
    public String toString() {
        return "GameRequest{" +
                "playerId='" + playerId + '\'' +
                ", move='" + move + '\'' +
                ", mode='" + mode + '\'' +
                ", opponent='" + opponent + '\'' +
                '}';
    }
}


package com.care.boot.gamedto;

public class GameResult {
    private String playerId;   // 플레이어 ID
    private String playerMove; // 플레이어 선택
    private String opponentId; // 상대방 ID
    private String opponentMove; // 상대방 선택
    private String result;     // 결과 (승/패/무승부)

    // 기본 생성자 (JSON 변환 시 필요)
    public GameResult() {}

    // 전체 필드를 포함하는 생성자
    public GameResult(String playerId, String playerMove, String opponentId, String opponentMove, String result) {
        this.playerId = playerId;
        this.playerMove = playerMove;
        this.opponentId = opponentId;
        this.opponentMove = opponentMove;
        this.result = result;
    }

    // Getter & Setter
    public String getPlayerId() {
        return playerId;
    }

    public void setPlayerId(String playerId) {
        this.playerId = playerId;
    }

    public String getPlayerMove() {
        return playerMove;
    }

    public void setPlayerMove(String playerMove) {
        this.playerMove = playerMove;
    }

    public String getOpponentId() {
        return opponentId;
    }

    public void setOpponentId(String opponentId) {
        this.opponentId = opponentId;
    }

    public String getOpponentMove() {
        return opponentMove;
    }

    public void setOpponentMove(String opponentMove) {
        this.opponentMove = opponentMove;
    }

    public String getResult() {
        return result;
    }

    public void setResult(String result) {
        this.result = result;
    }

    @Override
    public String toString() {
        return "GameResult{" +
                "playerId='" + playerId + '\'' +
                ", playerMove='" + playerMove + '\'' +
                ", opponentId='" + opponentId + '\'' +
                ", opponentMove='" + opponentMove + '\'' +
                ", result='" + result + '\'' +
                '}';
    }
}



package com.care.boot.gamedto;

public class PlayerStatsDTO {
    private String playerId;   // 플레이어 ID
    private int totalGames;    // 총 게임 수
    private int wins;          // 승리 수
    private int losses;        // 패배 수
    private int draws;         // 무승부 수
    private double winRate;    // 승률

    // 기본 생성자
    public PlayerStatsDTO() {}

    // 전체 필드를 포함하는 생성자
    public PlayerStatsDTO(String playerId, int totalGames, int wins, int losses, int draws, double winRate) {
        this.playerId = playerId;
        this.totalGames = totalGames;
        this.wins = wins;
        this.losses = losses;
        this.draws = draws;
        this.winRate = winRate;
    }

    // Getter & Setter
    public String getPlayerId() {
        return playerId;
    }

    public void setPlayerId(String playerId) {
        this.playerId = playerId;
    }

    public int getTotalGames() {
        return totalGames;
    }

    public void setTotalGames(int totalGames) {
        this.totalGames = totalGames;
    }

    public int getWins() {
        return wins;
    }

    public void setWins(int wins) {
        this.wins = wins;
    }

    public int getLosses() {
        return losses;
    }

    public void setLosses(int losses) {
        this.losses = losses;
    }

    public int getDraws() {
        return draws;
    }

    public void setDraws(int draws) {
        this.draws = draws;
    }

    public double getWinRate() {
        return winRate;
    }

    public void setWinRate(double winRate) {
        this.winRate = winRate;
    }

    @Override
    public String toString() {
        return "PlayerStatsDTO{" +
                "playerId='" + playerId + '\'' +
                ", totalGames=" + totalGames +
                ", wins=" + wins +
                ", losses=" + losses +
                ", draws=" + draws +
                ", winRate=" + winRate +
                '}';
    }
}




