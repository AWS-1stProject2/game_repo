package com.care.boot.game;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.PlayerStatsDTO;
import com.care.boot.gamedto.GameRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

@Controller
@RequestMapping("/game")
public class GameController {
    private final SimpMessagingTemplate messagingTemplate;
    private final GameService gameService;
    private final GameSessionManager sessionManager; // ✅ 온라인 사용자 관리
    private final ConcurrentLinkedQueue<String> waitingPlayers = new ConcurrentLinkedQueue<>();
    private final ConcurrentHashMap<String, String> gameMoves = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<String, String> opponentMap = new ConcurrentHashMap<>();

    public GameController(SimpMessagingTemplate messagingTemplate, GameService gameService, GameSessionManager sessionManager) {
        this.messagingTemplate = messagingTemplate;
        this.gameService = gameService;
        this.sessionManager = sessionManager;
    }

    // 🔹 WebSocket을 이용한 게임 플레이 요청 처리
    @MessageMapping("/play")
    public void play(GameRequest request) {
        String playerId = request.getPlayerId();
        String move = request.getMove();
        String mode = (request.getMode() == null || request.getMode().isEmpty()) ? "server" : request.getMode();
        String opponent = request.getOpponent();

        if ("server".equals(mode)) {
            processServerMode(playerId, move);
        } else {
            processPlayerMode(playerId, move, opponent);
        }
    }

    // ✅ 서버와 플레이하는 모드 (컴퓨터와 대결)
    private void processServerMode(String playerId, String move) {
        String serverMove = getRandomMove();
        String result = determineWinner(move, serverMove);

        System.out.println("📢 서버 모드 진행: playerId=" + playerId + ", playerMove=" + move + ", serverMove=" + serverMove + ", result=" + result);

        GameDTO gameDTO = new GameDTO(0, playerId, "server", move, serverMove, result, LocalDateTime.now());
        System.out.println("✅ GameDTO 생성됨: " + gameDTO);

        gameService.saveGameResult(gameDTO);

        // ✅ JSON 변환 확인
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            String json = objectMapper.writeValueAsString(gameDTO);
            System.out.println("📩 클라이언트로 전송할 JSON: " + json);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        messagingTemplate.convertAndSend("/topic/result/" + playerId, gameDTO);
    }

    // ✅ 플레이어 모드 처리 (멀티플레이 매칭)
    private void processPlayerMode(String playerId, String move, String opponent) {
        if ("random".equals(opponent)) {
            // 랜덤 매칭
            opponent = findRandomOpponent(playerId);
        }

        if (opponent == null) {
            messagingTemplate.convertAndSend("/topic/match", "❌ 상대방 없음. 대기 중...");
            waitingPlayers.add(playerId);
            return;
        }

        opponentMap.put(playerId, opponent);
        gameMoves.put(playerId, move);

        if (gameMoves.containsKey(opponent)) {
            String opponentMove = gameMoves.remove(opponent);
            String result = determineWinner(move, opponentMove);
            String opponentResult = determineWinner(opponentMove, move);

            GameDTO playerGame = new GameDTO(0, playerId, opponent, move, opponentMove, result, LocalDateTime.now());
            GameDTO opponentGame = new GameDTO(0, opponent, playerId, opponentMove, move, opponentResult, LocalDateTime.now());

            gameService.saveGameResult(playerGame);
            gameService.saveGameResult(opponentGame);

            messagingTemplate.convertAndSend("/topic/result/" + playerId, playerGame);
            messagingTemplate.convertAndSend("/topic/result/" + opponent, opponentGame);

            opponentMap.remove(playerId);
            opponentMap.remove(opponent);
        }
    }

    // ✅ 랜덤 상대 찾기
    private String findRandomOpponent(String playerId) {
        for (String opponent : sessionManager.getOnlinePlayers()) {
            if (!opponent.equals(playerId)) {
                return opponent;
            }
        }
        return null;
    }

    // ✅ 현재 접속한 플레이어 목록을 REST API로 제공
    @GetMapping("/onlinePlayers")
    @ResponseBody
    public List<String> getOnlinePlayers() {
        return List.copyOf(sessionManager.getOnlinePlayers());
    }

    // 🔹 특정 플레이어 전적 조회 (REST API)
    @GetMapping("/stats")
    @ResponseBody
    public PlayerStatsDTO getPlayerStats(@RequestParam String playerId) {
        return gameService.getPlayerStats(playerId);
    }

    // 🔹 전체 랭킹 조회 (REST API)
    @GetMapping("/ranking")
    @ResponseBody
    public List<PlayerStatsDTO> getRanking() {
        return gameService.getRanking();
    }

    // 🔹 특정 플레이어의 게임 기록 조회 (REST API)
    @GetMapping("/history")
    @ResponseBody
    public List<GameDTO> getGameHistory(@RequestParam String playerId) {
        return gameService.getGameHistory(playerId);
    }

    // ✅ 랜덤 가위바위보 선택
    private String getRandomMove() {
        String[] moves = {"가위", "바위", "보"};
        return moves[(int) (Math.random() * 3)];
    }

    // ✅ 승패 결정 로직
    private String determineWinner(String move1, String move2) {
        if (move1.equals(move2)) return "무승부";
        if ((move1.equals("가위") && move2.equals("보")) ||
            (move1.equals("바위") && move2.equals("가위")) ||
            (move1.equals("보") && move2.equals("바위"))) {
            return "승리";
        }
        return "패배";
    }
}
