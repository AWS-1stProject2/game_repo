package com.care.boot.game;

import com.care.boot.gamedto.GameDTO;
import com.care.boot.gamedto.PlayerStatsDTO;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

@Service
public class GameService {

    private final GameMapper gameMapper;

    public GameService(GameMapper gameMapper) {
        this.gameMapper = gameMapper;
    }

    public void saveGameResult(GameDTO gameDTO, boolean isMatchWin) {
        if (Objects.isNull(gameDTO.getPlayDate())) {
            gameDTO.setPlayDate(LocalDateTime.now());
        }

        gameMapper.insertGameResult(gameDTO);

        int scoreChange = calculateScoreChange(gameDTO.getResult(), isMatchWin);

        // ✅ 상대방 점수 업데이트를 별도 적용하지 않고, 한 번만 실행
        updatePlayerStats(gameDTO.getPlayer1Id(), gameDTO.getResult(), scoreChange);
        updatePlayerStats(gameDTO.getPlayer2Id(), getOppositeResult(gameDTO.getResult()), scoreChange * -1);
    }


    private int calculateScoreChange(String result, boolean isMatchWin) {
        int score = switch (result) {
            case "승리" -> 3;
            case "패배" -> -2;
            default -> 0;
        };

        // ✅ 3선승 보너스는 추가적으로 더하지 않고 한 번만 계산되도록 수정
        return isMatchWin ? score + 5 : score;
    }



    private void updatePlayerStats(String playerId, String result, int scoreChange) {
        if (!"server".equals(playerId)) {
            PlayerStatsDTO stats = gameMapper.getPlayerStats(playerId);

            // ✅ 플레이어가 없으면 추가 후 업데이트 진행
            if (stats == null) {
                gameMapper.createPlayerStats(playerId);
            }

            gameMapper.updatePlayerStats(playerId, result, scoreChange);
        }
    }

    public PlayerStatsDTO getPlayerStats(String playerId) {
        return gameMapper.getPlayerStats(playerId);
    }

    public List<PlayerStatsDTO> getRanking() {
        return gameMapper.getRanking();
    }

    public List<GameDTO> getGameHistory(String playerId) {
        return gameMapper.getGameHistory(playerId);
    }

    public boolean deleteGameRecord(int gameId) {
        return gameMapper.deleteGameRecord(gameId) > 0;
    }

    private String getOppositeResult(String result) {
        return switch (result) {
            case "승리" -> "패배";
            case "패배" -> "승리";
            default -> "무승부";
        };
    }
    
    public int getPlayerScore(String playerId) {
        PlayerStatsDTO stats = gameMapper.getPlayerStats(playerId);
        return (stats != null) ? stats.getScore() : 0; // ✅ 점수가 없으면 0 반환
    }
    
    

}
